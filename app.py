import streamlit as st
import pandas as pd
import joblib
import numpy as np
from datetime import datetime

# Configuration de la page
st.set_page_config(
    page_title="üå± AgroPredict - Diagnostic V√©g√©tal",
    page_icon="üåæ",
    layout="wide"
)

# Donn√©es des r√©gions
REGIONS = [
    {"name": "Dakar", "lat": 14.7167, "lon": -17.4677},
    {"name": "Thi√®s", "lat": 14.8136, "lon": -16.9622},
    {"name": "Saint-Louis", "lat": 16.0179, "lon": -16.4896},
    {"name": "Ziguinchor", "lat": 12.5642, "lon": -16.2719},
    {"name": "Kaolack", "lat": 14.1828, "lon": -16.2534},
    {"name": "Tambacounda", "lat": 13.7708, "lon": -13.6673},
    {"name": "Matam", "lat": 15.6553, "lon": -13.2556},
    {"name": "Kolda", "lat": 12.8927, "lon": -14.9389},
    {"name": "Fatick", "lat": 14.3431, "lon": -16.4183},
    {"name": "Louga", "lat": 15.6100, "lon": -16.2310},
    {"name": "Kaffrine", "lat": 14.1052, "lon": -15.5434},
    {"name": "Diourbel", "lat": 14.6605, "lon": -16.2366},
    {"name": "S√©dhiou", "lat": 12.7089, "lon": -15.5560},
    {"name": "K√©dougou", "lat": 12.5611, "lon": -12.1740},
    {"name": "Podor", "lat": 16.6566, "lon": -14.9612}
]

# Chargement du mod√®le
@st.cache_resource
def load_model():
    return joblib.load('modele/agriculture_model_pipeline.pkl')

model = load_model()

# Interface Utilisateur
st.title("üåø AgroPredict - Analyse NDVI en Temps R√©el")
st.markdown("""
    *Pr√©disez la sant√© des cultures gr√¢ce √† l'IA*  
    Ce mod√®le √©value l'indice NDVI (Normalized Difference Vegetation Index) √† partir des conditions environnementales.
    Le NDVI est un indicateur num√©rique qui quantifie la vigueur de la v√©g√©tation en utilisant les valeurs extraites des images satellites, sans n√©cessiter la manipulation directe de ces images.
""")

with st.expander("‚ÑπÔ∏è Comment utiliser"):
    st.write("""
    1. S√©lectionnez votre r√©gion
    2. Ajustez les param√®tres m√©t√©o et sol
    3. Cliquez sur 'Pr√©dire'
    4. Consultez l'analyse d√©taill√©e
    """)

# Sidebar pour les param√®tres
with st.sidebar:
    st.header("üìä Param√®tres d'Entr√©e")
    
    # S√©lection de la r√©gion avec autocompl√©tion
    selected_region = st.selectbox(
        "R√©gion",
        options=[r["name"] for r in REGIONS],
        index=0
    )
    
    # R√©cup√©ration automatique des coordonn√©es
    region_data = next(r for r in REGIONS if r["name"] == selected_region)
    latitude = region_data["lat"]
    longitude = region_data["lon"]
    
    # Affichage des coordonn√©es (lecture seule)
    st.markdown(f"""
    **Coordonn√©es GPS:**
    - Latitude: `{latitude}`
    - Longitude: `{longitude}`
    """)
    
    st.subheader("Conditions M√©t√©o")
    temperature = st.slider("Temp√©rature (¬∞C)", -10.0, 50.0, 25.0, 0.1)
    humidity = st.slider("Humidit√© Relative (%)", 0, 100, 60)
    wind_speed = st.slider("Vitesse du Vent (km/h)", 0.0, 100.0, 10.0, 0.1)
    
    st.subheader("√âtat du Sol")
    soil_moisture = st.slider("Humidit√© du Sol (0-1)", 0.0, 1.0, 0.2, 0.01)
    
    st.subheader("Date d'Observation")
    obs_date = st.date_input("Date", datetime.now())
    
    predict_btn = st.button("üå± Pr√©dire l'√âtat des Cultures", type="primary")

# Calcul des features d√©riv√©es
day_of_year = obs_date.timetuple().tm_yday
day_sin = np.sin(2 * np.pi * day_of_year/365)
day_cos = np.cos(2 * np.pi * day_of_year/365)
season = (obs_date.month % 12 + 3) // 3  # 1:Hiver, 2:Printemps, etc.

# Pr√©paration des donn√©es
input_data = pd.DataFrame({
    'temperature': [temperature],
    'humidity': [humidity],
    'wind_speed': [wind_speed],
    'soil_moisture': [soil_moisture],
    'longitude': [longitude],
    'latitude': [latitude],
    'day_sin': [day_sin],
    'day_cos': [day_cos],
    'season': [season],
    'temp_range': [10]  # Valeur par d√©faut
})

# Pr√©diction et affichage
if predict_btn:
    with st.spinner('Analyse en cours...'):
        ndvi_pred = model.predict(input_data)[0]
        
        # Affichage des r√©sultats
        st.success("Analyse termin√©e !")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("R√©sultat de Pr√©diction")
            st.metric(label="**NDVI Pr√©dit**", value=f"{ndvi_pred:.3f}")
            
            # Jauge visuelle
            st.progress(float(np.clip(ndvi_pred, 0, 1)))
            
            # Interpr√©tation
            if ndvi_pred < 0.1:
                st.error("üö® Alerte : Stress V√©g√©tal S√©v√®re")
                st.markdown("""
                **Recommandations :**
                - Irrigation imm√©diate requise
                - V√©rifier les parasites
                - Consid√©rer des cultures plus r√©sistantes
                """)
            elif 0.1 <= ndvi_pred < 0.3:
                st.warning("‚ö†Ô∏è Attention : Croissance Ralentie")
                st.markdown("""
                **Recommandations :**
                - Surveiller l'humidit√© du sol
                - Fertilisation mod√©r√©e recommand√©e
                """)
            else:
                st.success("‚úÖ Statut Optimal")
                st.markdown("""
                **Recommandations :**
                - Poursuivre les pratiques actuelles
                - Surveillance r√©guli√®re conseill√©e
                """)
        
        with col2:
            st.subheader("D√©tails Techniques")
            st.markdown(f"""
            **Param√®tres utilis√©s :**
            - R√©gion: {selected_region}
            - Coordonn√©es: {latitude:.4f}¬∞N, {longitude:.4f}¬∞E
            - Date: {obs_date.strftime('%d/%m/%Y')} (Saison {season})
            - Temp√©rature: {temperature}¬∞C
            - Humidit√© sol: {soil_moisture*100:.1f}%
            """)
            
            # Carte miniature (optionnelle)
            st.map(pd.DataFrame({
                'lat': [latitude],
                'lon': [longitude]
            }), zoom=6)